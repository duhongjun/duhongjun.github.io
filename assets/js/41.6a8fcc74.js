(window.webpackJsonp=window.webpackJsonp||[]).push([[41],{381:function(t,a,r){"use strict";r.r(a);var s=r(44),v=Object(s.a)({},(function(){var t=this,a=t.$createElement,r=t._self._c||a;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("blockquote",[r("p",[t._v("Tips: 学习资料来自极客时间 "),r("a",{attrs:{href:"https://time.geekbang.org/column/article/113513",target:"_blank",rel:"noopener noreferrer"}},[t._v("浏览器工作原理与实践-李兵"),r("OutboundLink")],1)])]),t._v(" "),r("h2",{attrs:{id:"_1-宏观视角下的浏览器"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_1-宏观视角下的浏览器"}},[t._v("#")]),t._v(" 1. 宏观视角下的浏览器")]),t._v(" "),r("h3",{attrs:{id:"chrome-架构"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#chrome-架构"}},[t._v("#")]),t._v(" Chrome 架构")]),t._v(" "),r("p",[r("code",[t._v("Chrome")]),t._v(" 使用了多进程来并行处理任务，我们打开一个页面时，可以通过任务管理器看到，有4个进程。 我们先来了解下 "),r("code",[t._v("线程")]),t._v("、"),r("code",[t._v("进程")]),t._v(" 和 "),r("code",[t._v("并行处理")]),t._v("的概念。")]),t._v(" "),r("h4",{attrs:{id:"什么是并行处理"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#什么是并行处理"}},[t._v("#")]),t._v(" 什么是并行处理")]),t._v(" "),r("p",[t._v("计算机中的并行处理就是同一时刻处理多个任务, 假如我们有个任务是计算下面几个表达式的值，并显示出最后的结果：")]),t._v(" "),r("div",{staticClass:"language-javascript extra-class"},[r("pre",{pre:!0,attrs:{class:"language-javascript"}},[r("code",[r("span",{pre:!0,attrs:{class:"token constant"}},[t._v("A")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token constant"}},[t._v("B")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("20")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v("\n"),r("span",{pre:!0,attrs:{class:"token constant"}},[t._v("C")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),t._v("\n")])])]),r("p",[t._v("我们可以把这个过程拆分为四个任务： 三次计算和显示最后的结果。")]),t._v(" "),r("ul",[r("li",[t._v("如果是单线程处理，就是按这四步的顺序依次分别执行这四个任务；")]),t._v(" "),r("li",[t._v("如果采用多线程，我们只需要分两步：1，使用三个线程同时执行前三个计算任务；2，执行最后的显示任务")])]),t._v(" "),r("p",[t._v("通过对比发现，使用并行处理可以大大提升性能！")]),t._v(" "),r("h4",{attrs:{id:"线程-vs-进程"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#线程-vs-进程"}},[t._v("#")]),t._v(" 线程 VS 进程")]),t._v(" "),r("p",[t._v("上面提到，多线程可以并行处理任务。但是"),r("strong",[t._v("线程是不能单独存在的，它是由进程来启动和管理的。")])]),t._v(" "),r("p",[t._v("什么是进程？")]),t._v(" "),r("p",[r("strong",[t._v("一个进程就是一个程序的运行实例")]),t._v("。详细解释就是，启动一个程序的时候，操作系统会为该程序创建一块内存，\n用来存放代码、运行中的数据和一个执行任务的主线程，我们把这样的一个运行环境叫"),r("strong",[t._v("进程")]),t._v("。")]),t._v(" "),r("p",[t._v("刚才的例子如下图：\n"),r("img",{attrs:{src:"https://static001.geekbang.org/resource/image/33/da/3380f0a16c323deda5d3a300804b95da.png",alt:""}})]),t._v(" "),r("p",[t._v("可以看出，"),r("strong",[t._v("线程是依附于进程的，而进程中使用多线程并行处理能提升运算效率。")])]),t._v(" "),r("h4",{attrs:{id:"进程和线程之间的关系有以下-4-个特点："}},[r("a",{staticClass:"header-anchor",attrs:{href:"#进程和线程之间的关系有以下-4-个特点："}},[t._v("#")]),t._v(" 进程和线程之间的关系有以下 4 个特点：")]),t._v(" "),r("ul",[r("li",[r("ol",[r("li",[t._v("进程中的任意一线程执行出错，都会导致整个进程的崩溃。")])])]),t._v(" "),r("li",[r("ol",{attrs:{start:"2"}},[r("li",[t._v("线程之间共享进程中的数据。")])])]),t._v(" "),r("li",[r("ol",{attrs:{start:"3"}},[r("li",[t._v("当一个进程关闭之后，操作系统会回收进程所占用的内存。")])])]),t._v(" "),r("li",[r("ol",{attrs:{start:"4"}},[r("li",[t._v("进程之间的内容相互隔离。")])])])]),t._v(" "),r("h4",{attrs:{id:"单进程浏览器时代"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#单进程浏览器时代"}},[t._v("#")]),t._v(" 单进程浏览器时代")]),t._v(" "),r("p",[r("strong",[t._v("单进程浏览器是指浏览器的所有功能模块都是运行在同一个进程里")]),t._v("，这些模块包含了网络、插件、JavaScript 运行环境、渲染引擎和页面等。")]),t._v(" "),r("p",[t._v("如此多的功能模块运行在一个进程里，导致了以下三个问题：")]),t._v(" "),r("ul",[r("li",[t._v("问题 1：不稳定：插件或者渲染引擎模块是不稳定的，可能导致浏览器崩溃。")]),t._v(" "),r("li",[t._v("问题 2：不流畅：运行在同一个线程中，就意味着同一时刻只能有一个模块可以执行，"),r("strong",[t._v("内存泄漏")]),t._v("也是单进程变慢的重要原因。")]),t._v(" "),r("li",[t._v("问题 3：不安全：恶意插件、恶意脚本获取系统权限和资源，很危险。")])]),t._v(" "),r("h4",{attrs:{id:"多进程浏览器时代"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#多进程浏览器时代"}},[t._v("#")]),t._v(" 多进程浏览器时代")]),t._v(" "),r("p",[t._v("早期的 "),r("code",[t._v("Chrome")]),t._v(" 多进程架构如下：\n"),r("img",{attrs:{src:"https://static001.geekbang.org/resource/image/cd/60/cdc9215e6c6377fc965b7fac8c3ec960.png",alt:""}})]),t._v(" "),r("ul",[r("li",[t._v("进程间相互隔离，不会影响到浏览器或者其他页面， 解决了不稳定的问题。")]),t._v(" "),r("li",[t._v("JS 运行在渲染进程中，至多只会影响自己这个页面；对于内存泄漏，当关闭一个页面时，该进程占用的内存都会被系统回收。")]),t._v(" "),r("li",[t._v("Chrome 把插件进程和渲染进程锁在沙箱里面，恶意程序无法突破沙箱去获取系统权限。")])]),t._v(" "),r("p",[t._v("最新的 "),r("code",[t._v("Chrome")]),t._v(" 进程架构如下：\n"),r("img",{attrs:{src:"https://static001.geekbang.org/resource/image/b6/fc/b61cab529fa31301bde290813b4587fc.png",alt:""}})]),t._v(" "),r("p",[t._v("从图中可以看到，最新的 Chrome 浏览器包括：1 个浏览器（Browser）主进程、1 个 GPU 进程、1 个网络（NetWork）进程、多个渲染进程和多个插件进程。")]),t._v(" "),r("p",[t._v("逐个介绍下这几个进程的功能:")]),t._v(" "),r("ul",[r("li",[r("strong",[t._v("浏览器进程")]),t._v("。主要负责界面显示、用户交互、子进程管理，同时提供存储等功能。")]),t._v(" "),r("li",[r("strong",[t._v("渲染进程")]),t._v("。核心任务是将 HTML、CSS 和 JavaScript 转换为用户可以与之交互的网页，排版引擎 Blink 和 JavaScript 引擎 V8 都是运行在该进程中，默认情况下，Chrome 会为每个 Tab 标签创建一个渲染进程。出于安全考虑，渲染进程都是运行在沙箱模式下。")]),t._v(" "),r("li",[r("strong",[t._v("GPU 进程")]),t._v("。其实，Chrome 刚开始发布的时候是没有 GPU 进程的。而 GPU 的使用初衷是为了实现 3D CSS 的效果，只是随后网页、Chrome 的 UI 界面都选择采用 GPU 来绘制，这使得 GPU 成为浏览器普遍的需求。最后，Chrome 在其多进程架构上也引入了 GPU 进程。")]),t._v(" "),r("li",[r("strong",[t._v("网络进程")]),t._v("。主要负责页面的网络资源加载，之前是作为一个模块运行在浏览器进程里面的，直至最近才独立出来，成为一个单独的进程。")]),t._v(" "),r("li",[r("strong",[t._v("插件进程")]),t._v("。主要是负责插件的运行，因插件易崩溃，所以需要通过插件进程来隔离，以保证插件进程崩溃不会对浏览器和页面造成影响。")])]),t._v(" "),r("p",[t._v("现在我们明白了为什么开头说打开一个网页有4个进程了，如果有插件运行的话，还要再加上一个插件进程~")]),t._v(" "),r("p",[t._v("不过凡事都有两面性，多进程模型也有它自己的问题：")]),t._v(" "),r("ul",[r("li",[r("strong",[t._v("更高的资源占用")]),t._v("：每个进程都会包含公共基础结构的副本（如 JavaScript 运行环境），这就意味着浏览器会消耗更多的内存资源。")]),t._v(" "),r("li",[r("strong",[t._v("更复杂的体系架构")]),t._v("：浏览器各模块之间耦合性高、扩展性差等问题，会导致现在的架构已经很难适应新的需求了。")])]),t._v(" "),r("h4",{attrs:{id:"未来面向服务的架构"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#未来面向服务的架构"}},[t._v("#")]),t._v(" 未来面向服务的架构")]),t._v(" "),r("p",[t._v("为了解决这些问题，在 2016 年，Chrome 官方团队使用“面向服务的架构”的思想设计了新的 Chrome 架构。\n原来的各种模块会被重构成独立的服务（Service），每个服务（Service）都可以在独立的进程中运行，访问服务（Service）必须使用定义好的接口，通过 IPC 来通信，从而"),r("strong",[t._v("构建一个更内聚、松耦合、易于维护和扩展的系统")]),t._v("。")]),t._v(" "),r("p",[t._v("下面是“面向服务的架构”的进程模型图：\n"),r("img",{attrs:{src:"https://static001.geekbang.org/resource/image/32/2a/329658fe821252db47b0964037a1de2a.png",alt:""}})]),t._v(" "),r("p",[t._v("同时 Chrome 还提供灵活的弹性架构，在强大性能设备上会以多进程的方式运行基础服务，但是如果在资源受限的设备上（如下图），Chrome 会将很多服务整合到一个进程中，从而节省内存占用。\n"),r("img",{attrs:{src:"https://static001.geekbang.org/resource/image/a9/76/a9ba86d7b03263fa3997d3733d958176.png",alt:""}})]),t._v(" "),r("p",[t._v("目前 Chrome 正处在老的架构向服务化架构过渡阶段，这将是一个漫长的迭代过程~")]),t._v(" "),r("br"),t._v(" "),r("h2",{attrs:{id:"_2-浏览器中的javascript执行机制"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-浏览器中的javascript执行机制"}},[t._v("#")]),t._v(" 2. 浏览器中的JavaScript执行机制")]),t._v(" "),r("br"),t._v(" "),r("h2",{attrs:{id:"_3-v8工作原理"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_3-v8工作原理"}},[t._v("#")]),t._v(" 3. V8工作原理")]),t._v(" "),r("br"),t._v(" "),r("h2",{attrs:{id:"_4-浏览器中的页面事件循环系统"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_4-浏览器中的页面事件循环系统"}},[t._v("#")]),t._v(" 4. 浏览器中的页面事件循环系统")]),t._v(" "),r("br"),t._v(" "),r("h2",{attrs:{id:"_5-浏览器中的页面"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_5-浏览器中的页面"}},[t._v("#")]),t._v(" 5. 浏览器中的页面")]),t._v(" "),r("br"),t._v(" "),r("h2",{attrs:{id:"_6-浏览器中的网络"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_6-浏览器中的网络"}},[t._v("#")]),t._v(" 6. 浏览器中的网络")]),t._v(" "),r("br"),t._v(" "),r("h2",{attrs:{id:"_7-浏览器安全"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_7-浏览器安全"}},[t._v("#")]),t._v(" 7. 浏览器安全")])])}),[],!1,null,null,null);a.default=v.exports}}]);